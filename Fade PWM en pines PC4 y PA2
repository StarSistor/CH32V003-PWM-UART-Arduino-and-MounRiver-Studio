/*********************************************************************
Codigo testeado en CH32V003J4
Descripción del Código:
Este código configura el temporizador TIM1 para generar señales PWM sincronizadas en los pines PC4 (canal TIM1 CH4) y PA2 (canal TIM1 CH2N).
PC4 utiliza una señal PWM normal, mientras que PA2 utiliza una señal PWM complementaria. El código realiza un desvanecimiento (fade) sincronizado:
aumenta el ancho de pulso en PC4 mientras disminuye el ancho de pulso en PA2 durante el fade-in, y viceversa durante el fade-out.

 */

#include "debug.h"


void TIM1_PWMOut_Init(u16 arr, u16 psc, u16 ccp, u8 channel)
{
    GPIO_PinRemapConfig(AFIO_PCFR1_PA12_REMAP, DISABLE);

    GPIO_InitTypeDef GPIO_InitStructure = {0};
    TIM_OCInitTypeDef TIM_OCInitStructure = {0};
    TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure = {0};

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOA | RCC_APB2Periph_TIM1, ENABLE);

    TIM_TimeBaseInitStructure.TIM_Period = arr;
    TIM_TimeBaseInitStructure.TIM_Prescaler = psc;
    TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
    TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
    TIM_TimeBaseInit(TIM1, &TIM_TimeBaseInitStructure);

    if (channel == 2) {
        // Initialize PA2 for TIM1 CH2N
        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
        GPIO_Init(GPIOA, &GPIO_InitStructure);

        // Initialize TIM1 CH2N
        TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
        TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
        TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
        TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High; // Complementary polarity
        TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable; // Enable complementary output
        TIM_OCInitStructure.TIM_Pulse = ccp;
        TIM_OC2Init(TIM1, &TIM_OCInitStructure);
        TIM_OC2PreloadConfig(TIM1, TIM_OCPreload_Enable);
    } else if (channel == 4) {
        // Initialize PC4 for TIM1 CH4
        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
        GPIO_Init(GPIOC, &GPIO_InitStructure);

        // Initialize TIM1 CH4
        TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
        TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
        TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
        TIM_OCInitStructure.TIM_Pulse = ccp;
        TIM_OC4Init(TIM1, &TIM_OCInitStructure);
        TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);
    }

    TIM_ARRPreloadConfig(TIM1, ENABLE);
    TIM_Cmd(TIM1, ENABLE);
    TIM_CtrlPWMOutputs(TIM1, ENABLE);
}


int main(void)
{
    SystemCoreClockUpdate();
    Delay_Init();

    // Parameters for PWM
    u16 arr = 479;  // Period value (480-1)
    u16 psc = 119;  // Prescaler value (120-1) to get 1kHz
    u16 ccp;        // Pulse width

    // Initialize PWM for both channels
    TIM1_PWMOut_Init(arr, psc, 0, 4);  // For TIM1 CH4 on PC4
    TIM1_PWMOut_Init(arr, psc, 0, 2);  // For TIM1 CH2N on PA2

    while (1)
    {
        // Fade in
        for (ccp = 0; ccp <= arr; ccp++)
        {
            TIM_SetCompare4(TIM1, ccp);  // Update TIM1 CH4
            TIM_SetCompare2(TIM1, arr - ccp);  // Update TIM1 CH2N with inverted value
            Delay_Ms(10);  // Adjust delay to change fade speed
        }

        // Fade out
        for (ccp = arr; ccp > 0; ccp--)
        {
            TIM_SetCompare4(TIM1, ccp);  // Update TIM1 CH4
            TIM_SetCompare2(TIM1, arr - ccp);  // Update TIM1 CH2N with inverted value
            Delay_Ms(10);  // Adjust delay to change fade speed
        }
    }
}
